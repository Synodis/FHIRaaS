/**
 * InterSystems IRIS FHIRAAS
 * Iris Api to manage tenants
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CreateTenant } from '../model/createTenant';
import { Endpoint } from '../model/endpoint';
import { PendingEndpoint } from '../model/pendingEndpoint';
import { Tenant } from '../model/tenant';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';


@Injectable()
export class DefaultService {

    protected basePath = environment.BASE_PATH+'/fhiraas/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete a endpoint with an ID.
     * 
     * @param tenantId the tenant Id
     * @param endpointId the endpoint Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEndpoint(tenantId: string, endpointId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEndpoint(tenantId: string, endpointId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEndpoint(tenantId: string, endpointId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEndpoint(tenantId: string, endpointId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling deleteEndpoint.');
        }

        if (endpointId === null || endpointId === undefined) {
            throw new Error('Required parameter endpointId was null or undefined when calling deleteEndpoint.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(endpointId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a tenant with an ID.
     * 
     * @param tenantId the tenant Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTenant(tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTenant(tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTenant(tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTenant(tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling deleteTenant.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a tenant by ID.
     * 
     * @param tenantId the tenant Id
     * @param endpointId the endpoint Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEndpoint(tenantId: string, endpointId: string, observe?: 'body', reportProgress?: boolean): Observable<Endpoint>;
    public getEndpoint(tenantId: string, endpointId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Endpoint>>;
    public getEndpoint(tenantId: string, endpointId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Endpoint>>;
    public getEndpoint(tenantId: string, endpointId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getEndpoint.');
        }

        if (endpointId === null || endpointId === undefined) {
            throw new Error('Required parameter endpointId was null or undefined when calling getEndpoint.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Endpoint>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(endpointId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get this spec
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpec(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSpec(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSpec(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSpec(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/tenants/_spec`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a tenant by ID.
     * 
     * @param tenantId the tenant Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTenant(tenantId: string, observe?: 'body', reportProgress?: boolean): Observable<Tenant>;
    public getTenant(tenantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tenant>>;
    public getTenant(tenantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tenant>>;
    public getTenant(tenantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling getTenant.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Tenant>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of tenants.
     * Return the list of available tenant on this Iris instance.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTenants(observe?: 'body', reportProgress?: boolean): Observable<Array<Tenant>>;
    public getTenants(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tenant>>>;
    public getTenants(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tenant>>>;
    public getTenants(observe: any , reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tenant>>(`${this.basePath}/tenants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a endpoint with an ID.
     * 
     * @param tenantId the tenant Id
     * @param endpointId the endpoint Id
     * @param tenantInformations 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEndpoint(tenantId: string, endpointId: string, tenantInformations?: CreateTenant, observe?: 'body', reportProgress?: boolean): Observable<PendingEndpoint>;
    public putEndpoint(tenantId: string, endpointId: string, tenantInformations?: CreateTenant, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PendingEndpoint>>;
    public putEndpoint(tenantId: string, endpointId: string, tenantInformations?: CreateTenant, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PendingEndpoint>>;
    public putEndpoint(tenantId: string, endpointId: string, tenantInformations?: CreateTenant, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling putEndpoint.');
        }

        if (endpointId === null || endpointId === undefined) {
            throw new Error('Required parameter endpointId was null or undefined when calling putEndpoint.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PendingEndpoint>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}/${encodeURIComponent(String(endpointId))}`,
            tenantInformations,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a tenant with an ID.
     * 
     * @param tenantId the tenant Id
     * @param tenantInformations 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTenant(tenantId: string, tenantInformations?: CreateTenant, observe?: 'body', reportProgress?: boolean): Observable<PendingEndpoint>;
    public putTenant(tenantId: string, tenantInformations?: CreateTenant, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PendingEndpoint>>;
    public putTenant(tenantId: string, tenantInformations?: CreateTenant, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PendingEndpoint>>;
    public putTenant(tenantId: string, tenantInformations?: CreateTenant, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling putTenant.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PendingEndpoint>(`${this.basePath}/tenants/${encodeURIComponent(String(tenantId))}`,
            tenantInformations,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
